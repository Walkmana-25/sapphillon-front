// @generated by protoc-gen-es v2.7.0 with parameter "target=ts"
// @generated from file sapphillon/ai/v1/provider_service.proto (package sapphillon.ai.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv2";
import type { FieldMask } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_field_mask } from "@bufbuild/protobuf/wkt";
import type { Status } from "../../../google/rpc/status_pb";
import { file_google_rpc_status } from "../../../google/rpc/status_pb";
import type { Provider } from "./provider_pb";
import { file_sapphillon_ai_v1_provider } from "./provider_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file sapphillon/ai/v1/provider_service.proto.
 */
export const file_sapphillon_ai_v1_provider_service: GenFile = /*@__PURE__*/
  fileDesc("CidzYXBwaGlsbG9uL2FpL3YxL3Byb3ZpZGVyX3NlcnZpY2UucHJvdG8SEHNhcHBoaWxsb24uYWkudjEiRQoVQ3JlYXRlUHJvdmlkZXJSZXF1ZXN0EiwKCHByb3ZpZGVyGAEgASgLMhouc2FwcGhpbGxvbi5haS52MS5Qcm92aWRlciJGChJHZXRQcm92aWRlclJlcXVlc3QSDAoEbmFtZRgBIAEoCRIiCgZzdGF0dXMYAiABKAsyEi5nb29nbGUucnBjLlN0YXR1cyI9ChRMaXN0UHJvdmlkZXJzUmVxdWVzdBIRCglwYWdlX3NpemUYASABKAUSEgoKcGFnZV90b2tlbhgCIAEoCSKDAQoVTGlzdFByb3ZpZGVyc1Jlc3BvbnNlEi0KCXByb3ZpZGVycxgBIAMoCzIaLnNhcHBoaWxsb24uYWkudjEuUHJvdmlkZXISFwoPbmV4dF9wYWdlX3Rva2VuGAIgASgJEiIKBnN0YXR1cxgDIAEoCzISLmdvb2dsZS5ycGMuU3RhdHVzImoKFkNyZWF0ZVByb3ZpZGVyUmVzcG9uc2USLAoIcHJvdmlkZXIYASABKAsyGi5zYXBwaGlsbG9uLmFpLnYxLlByb3ZpZGVyEiIKBnN0YXR1cxgCIAEoCzISLmdvb2dsZS5ycGMuU3RhdHVzImcKE0dldFByb3ZpZGVyUmVzcG9uc2USLAoIcHJvdmlkZXIYASABKAsyGi5zYXBwaGlsbG9uLmFpLnYxLlByb3ZpZGVyEiIKBnN0YXR1cxgCIAEoCzISLmdvb2dsZS5ycGMuU3RhdHVzImoKFlVwZGF0ZVByb3ZpZGVyUmVzcG9uc2USLAoIcHJvdmlkZXIYASABKAsyGi5zYXBwaGlsbG9uLmFpLnYxLlByb3ZpZGVyEiIKBnN0YXR1cxgCIAEoCzISLmdvb2dsZS5ycGMuU3RhdHVzIjwKFkRlbGV0ZVByb3ZpZGVyUmVzcG9uc2USIgoGc3RhdHVzGAEgASgLMhIuZ29vZ2xlLnJwYy5TdGF0dXMidgoVVXBkYXRlUHJvdmlkZXJSZXF1ZXN0EiwKCHByb3ZpZGVyGAEgASgLMhouc2FwcGhpbGxvbi5haS52MS5Qcm92aWRlchIvCgt1cGRhdGVfbWFzaxgCIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5GaWVsZE1hc2siJQoVRGVsZXRlUHJvdmlkZXJSZXF1ZXN0EgwKBG5hbWUYASABKAky/gMKD1Byb3ZpZGVyU2VydmljZRJjCg5DcmVhdGVQcm92aWRlchInLnNhcHBoaWxsb24uYWkudjEuQ3JlYXRlUHJvdmlkZXJSZXF1ZXN0Giguc2FwcGhpbGxvbi5haS52MS5DcmVhdGVQcm92aWRlclJlc3BvbnNlEloKC0dldFByb3ZpZGVyEiQuc2FwcGhpbGxvbi5haS52MS5HZXRQcm92aWRlclJlcXVlc3QaJS5zYXBwaGlsbG9uLmFpLnYxLkdldFByb3ZpZGVyUmVzcG9uc2USYAoNTGlzdFByb3ZpZGVycxImLnNhcHBoaWxsb24uYWkudjEuTGlzdFByb3ZpZGVyc1JlcXVlc3QaJy5zYXBwaGlsbG9uLmFpLnYxLkxpc3RQcm92aWRlcnNSZXNwb25zZRJjCg5VcGRhdGVQcm92aWRlchInLnNhcHBoaWxsb24uYWkudjEuVXBkYXRlUHJvdmlkZXJSZXF1ZXN0Giguc2FwcGhpbGxvbi5haS52MS5VcGRhdGVQcm92aWRlclJlc3BvbnNlEmMKDkRlbGV0ZVByb3ZpZGVyEicuc2FwcGhpbGxvbi5haS52MS5EZWxldGVQcm92aWRlclJlcXVlc3QaKC5zYXBwaGlsbG9uLmFpLnYxLkRlbGV0ZVByb3ZpZGVyUmVzcG9uc2ViBnByb3RvMw", [file_google_protobuf_field_mask, file_google_rpc_status, file_sapphillon_ai_v1_provider]);

/**
 * Request message for creating a provider.
 *
 * @generated from message sapphillon.ai.v1.CreateProviderRequest
 */
export type CreateProviderRequest = Message<"sapphillon.ai.v1.CreateProviderRequest"> & {
  /**
   * The provider resource to create.
   * The `name` field should be left empty; the server will assign it.
   * `display_name` and `api_key` are required.
   *
   * @generated from field: sapphillon.ai.v1.Provider provider = 1;
   */
  provider?: Provider;
};

/**
 * Describes the message sapphillon.ai.v1.CreateProviderRequest.
 * Use `create(CreateProviderRequestSchema)` to create a new message.
 */
export const CreateProviderRequestSchema: GenMessage<CreateProviderRequest> = /*@__PURE__*/
  messageDesc(file_sapphillon_ai_v1_provider_service, 0);

/**
 * Request message for retrieving a provider.
 *
 * @generated from message sapphillon.ai.v1.GetProviderRequest
 */
export type GetProviderRequest = Message<"sapphillon.ai.v1.GetProviderRequest"> & {
  /**
   * The resource name of the provider to retrieve.
   * Format: "providers/{provider_id}"
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from field: google.rpc.Status status = 2;
   */
  status?: Status;
};

/**
 * Describes the message sapphillon.ai.v1.GetProviderRequest.
 * Use `create(GetProviderRequestSchema)` to create a new message.
 */
export const GetProviderRequestSchema: GenMessage<GetProviderRequest> = /*@__PURE__*/
  messageDesc(file_sapphillon_ai_v1_provider_service, 1);

/**
 * Request message for listing providers.
 *
 * @generated from message sapphillon.ai.v1.ListProvidersRequest
 */
export type ListProvidersRequest = Message<"sapphillon.ai.v1.ListProvidersRequest"> & {
  /**
   * The maximum number of providers to return.
   * The service may return fewer than this value.
   * If zero, the server will pick an appropriate default.
   *
   * @generated from field: int32 page_size = 1;
   */
  pageSize: number;

  /**
   * A page token, received from a previous `ListProviders` call.
   * Provide this to retrieve the subsequent page.
   *
   * @generated from field: string page_token = 2;
   */
  pageToken: string;
};

/**
 * Describes the message sapphillon.ai.v1.ListProvidersRequest.
 * Use `create(ListProvidersRequestSchema)` to create a new message.
 */
export const ListProvidersRequestSchema: GenMessage<ListProvidersRequest> = /*@__PURE__*/
  messageDesc(file_sapphillon_ai_v1_provider_service, 2);

/**
 * Response message for listing providers.
 *
 * @generated from message sapphillon.ai.v1.ListProvidersResponse
 */
export type ListProvidersResponse = Message<"sapphillon.ai.v1.ListProvidersResponse"> & {
  /**
   * A list of configured providers.
   *
   * @generated from field: repeated sapphillon.ai.v1.Provider providers = 1;
   */
  providers: Provider[];

  /**
   * A token to retrieve the next page of results.
   * If this field is empty, there are no more results.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;

  /**
   * @generated from field: google.rpc.Status status = 3;
   */
  status?: Status;
};

/**
 * Describes the message sapphillon.ai.v1.ListProvidersResponse.
 * Use `create(ListProvidersResponseSchema)` to create a new message.
 */
export const ListProvidersResponseSchema: GenMessage<ListProvidersResponse> = /*@__PURE__*/
  messageDesc(file_sapphillon_ai_v1_provider_service, 3);

/**
 *
 * Response message for creating a provider.
 *
 *
 * @generated from message sapphillon.ai.v1.CreateProviderResponse
 */
export type CreateProviderResponse = Message<"sapphillon.ai.v1.CreateProviderResponse"> & {
  /**
   * @generated from field: sapphillon.ai.v1.Provider provider = 1;
   */
  provider?: Provider;

  /**
   * @generated from field: google.rpc.Status status = 2;
   */
  status?: Status;
};

/**
 * Describes the message sapphillon.ai.v1.CreateProviderResponse.
 * Use `create(CreateProviderResponseSchema)` to create a new message.
 */
export const CreateProviderResponseSchema: GenMessage<CreateProviderResponse> = /*@__PURE__*/
  messageDesc(file_sapphillon_ai_v1_provider_service, 4);

/**
 *
 * Response message for retrieving a provider.
 *
 *
 * @generated from message sapphillon.ai.v1.GetProviderResponse
 */
export type GetProviderResponse = Message<"sapphillon.ai.v1.GetProviderResponse"> & {
  /**
   * @generated from field: sapphillon.ai.v1.Provider provider = 1;
   */
  provider?: Provider;

  /**
   * @generated from field: google.rpc.Status status = 2;
   */
  status?: Status;
};

/**
 * Describes the message sapphillon.ai.v1.GetProviderResponse.
 * Use `create(GetProviderResponseSchema)` to create a new message.
 */
export const GetProviderResponseSchema: GenMessage<GetProviderResponse> = /*@__PURE__*/
  messageDesc(file_sapphillon_ai_v1_provider_service, 5);

/**
 *
 * Response message for updating a provider.
 *
 *
 * @generated from message sapphillon.ai.v1.UpdateProviderResponse
 */
export type UpdateProviderResponse = Message<"sapphillon.ai.v1.UpdateProviderResponse"> & {
  /**
   * @generated from field: sapphillon.ai.v1.Provider provider = 1;
   */
  provider?: Provider;

  /**
   * @generated from field: google.rpc.Status status = 2;
   */
  status?: Status;
};

/**
 * Describes the message sapphillon.ai.v1.UpdateProviderResponse.
 * Use `create(UpdateProviderResponseSchema)` to create a new message.
 */
export const UpdateProviderResponseSchema: GenMessage<UpdateProviderResponse> = /*@__PURE__*/
  messageDesc(file_sapphillon_ai_v1_provider_service, 6);

/**
 *
 * Response message for deleting a provider.
 *
 *
 * @generated from message sapphillon.ai.v1.DeleteProviderResponse
 */
export type DeleteProviderResponse = Message<"sapphillon.ai.v1.DeleteProviderResponse"> & {
  /**
   * @generated from field: google.rpc.Status status = 1;
   */
  status?: Status;
};

/**
 * Describes the message sapphillon.ai.v1.DeleteProviderResponse.
 * Use `create(DeleteProviderResponseSchema)` to create a new message.
 */
export const DeleteProviderResponseSchema: GenMessage<DeleteProviderResponse> = /*@__PURE__*/
  messageDesc(file_sapphillon_ai_v1_provider_service, 7);

/**
 * Request message for updating a provider.
 *
 * @generated from message sapphillon.ai.v1.UpdateProviderRequest
 */
export type UpdateProviderRequest = Message<"sapphillon.ai.v1.UpdateProviderRequest"> & {
  /**
   * The provider resource with updated fields.
   * The `name` field is used to identify the provider to update.
   *
   * @generated from field: sapphillon.ai.v1.Provider provider = 1;
   */
  provider?: Provider;

  /**
   * The list of fields to be updated.
   * e.g., "display_name", "api_key"
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 2;
   */
  updateMask?: FieldMask;
};

/**
 * Describes the message sapphillon.ai.v1.UpdateProviderRequest.
 * Use `create(UpdateProviderRequestSchema)` to create a new message.
 */
export const UpdateProviderRequestSchema: GenMessage<UpdateProviderRequest> = /*@__PURE__*/
  messageDesc(file_sapphillon_ai_v1_provider_service, 8);

/**
 * Request message for deleting a provider.
 *
 * @generated from message sapphillon.ai.v1.DeleteProviderRequest
 */
export type DeleteProviderRequest = Message<"sapphillon.ai.v1.DeleteProviderRequest"> & {
  /**
   * The resource name of the provider to delete.
   * Format: "providers/{provider_id}"
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message sapphillon.ai.v1.DeleteProviderRequest.
 * Use `create(DeleteProviderRequestSchema)` to create a new message.
 */
export const DeleteProviderRequestSchema: GenMessage<DeleteProviderRequest> = /*@__PURE__*/
  messageDesc(file_sapphillon_ai_v1_provider_service, 9);

/**
 * *
 * Service for managing LLM providers.
 * Allows clients to configure, list, update, and remove
 * different LLM providers that the system can use.
 *
 * @generated from service sapphillon.ai.v1.ProviderService
 */
export const ProviderService: GenService<{
  /**
   * Creates a new provider configuration.
   * The `api_key` must be provided in the request.
   * Returns the created provider resource.
   *
   * @generated from rpc sapphillon.ai.v1.ProviderService.CreateProvider
   */
  createProvider: {
    methodKind: "unary";
    input: typeof CreateProviderRequestSchema;
    output: typeof CreateProviderResponseSchema;
  },
  /**
   * Retrieves a specific provider's details by its resource name.
   * The `api_key` will not be returned in the response.
   * Returns the requested provider resource.
   *
   * @generated from rpc sapphillon.ai.v1.ProviderService.GetProvider
   */
  getProvider: {
    methodKind: "unary";
    input: typeof GetProviderRequestSchema;
    output: typeof GetProviderResponseSchema;
  },
  /**
   * Lists all configured providers.
   * The `api_key` will not be returned in the response.
   * Returns a list of provider resources.
   *
   * Already uses a proper response message
   *
   * @generated from rpc sapphillon.ai.v1.ProviderService.ListProviders
   */
  listProviders: {
    methodKind: "unary";
    input: typeof ListProvidersRequestSchema;
    output: typeof ListProvidersResponseSchema;
  },
  /**
   * Updates a provider's configuration.
   * Use a field_mask to specify which fields to update.
   * You can update the `display_name` and `api_key`.
   * Returns the updated provider resource.
   *
   * @generated from rpc sapphillon.ai.v1.ProviderService.UpdateProvider
   */
  updateProvider: {
    methodKind: "unary";
    input: typeof UpdateProviderRequestSchema;
    output: typeof UpdateProviderResponseSchema;
  },
  /**
   * Deletes a provider configuration permanently.
   * Returns an empty response on success.
   *
   * @generated from rpc sapphillon.ai.v1.ProviderService.DeleteProvider
   */
  deleteProvider: {
    methodKind: "unary";
    input: typeof DeleteProviderRequestSchema;
    output: typeof DeleteProviderResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_sapphillon_ai_v1_provider_service, 0);

